name: "Release"

on:
  push:
    paths:
      - ".github/workflows/hackage.yml"
  release:
    types:
      - created
      - published
  workflow_dispatch:
    inputs:
      release:
        type: string
        description: "The tag of the release to use for the workflow run."
        required: true
      environment:
        type: string
        description: "The deployment environment. Leave blank for testing."
        default: ""
        required: false

concurrency:
  group: hackage
  cancel-in-progress: false

jobs:
  build-binaries:
    name: "Build release binaries"
    if: |
      (github.event_name == 'release' &&
      github.event.action != 'published') ||
      github.event_name != 'release'

    permissions:
      contents: read
      id-token: write
      attestations: write

    uses: ./.github/workflows/haskell.yml
    with:
      attest: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}

  upload-binaries:
    name: "Upload release binaries"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'release' &&
      github.event.action == 'published') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push'

    permissions:
      contents: write

    needs:
      - build-binaries

    steps:
      - name: "Download all artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: "ha-client-*"
          merge-multiple: true

      - name: "List artifact contents"
        shell: bash
        run: ls -lahR

      - name: "Upload release assets"
        if: |
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'release'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REF: ${{ inputs.release || github.ref }}
          REPO: ${{ github.repository }}
        run: |
          gh release upload $REF *.tar.gz --repo $REPO

  check-distribution:
    name: "Check distribution"
    runs-on: ubuntu-latest

    steps:
      - name: "Dump context"
        shell: bash
        env:
          EVENT_DATA: "${{ toJson(github) }}"
        run: echo $EVENT_DATA | jq

      - name: "Clone repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.release || github.ref }}

      - name: "Install Stack"
        uses: haskell-actions/setup@v2
        id: install-haskell
        with:
          stack-no-global: true
          enable-stack: true
          stack-version: "latest"

      - name: "Check source distribution"
        shell: bash
        run: stack sdist .

  publish-to-hackage:
    name: "Publish to Hackage"
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'published' ||
      inputs.environment

    needs:
      - check-distribution

    environment:
      name: ${{ (github.event.action == 'published' && 'Hackage') || inputs.environment || '' }}
      url: "https://hackage.haskell.org/package/home-assistant-client-${{ steps.determine-version.outputs.version }}"

    steps:
      - name: "Dump context"
        shell: bash
        env:
          EVENT_DATA: "${{ toJson(github) }}"
        run: echo $EVENT_DATA | jq

      - name: "Clone repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.release || github.ref }}

      - name: "Determine version"
        id: determine-version
        shell: bash
        run: |
          PACKAGE_VERSION="$(yq '.version' package.yaml)"
          echo $PACKAGE_VERSION
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: "Install Stack"
        uses: haskell-actions/setup@v2
        id: install-haskell
        with:
          stack-no-global: true
          enable-stack: true
          stack-version: "latest"

      - name: Publish `home-assistant-client`
        if: |
          (startsWith(github.ref, 'refs/tags/v') && github.event.action == 'published') ||
          (github.event_name == 'workflow_dispatch' && inputs.environment == 'Hackage')
        shell: bash
        run: stack upload . --candidate --no-save-hackage-creds
        env:
          HACKAGE_KEY: ${{ secrets.HACKAGE_KEY }}
